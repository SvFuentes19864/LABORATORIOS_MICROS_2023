/* UNIVERSIDAD DEL VALLE DE GUATEMALA
 * IE2023 PROGRAMACIÓN DE MICROCONTROLADORES
 * File:   LAB5.c
 * Author: SHAGTY VALERIA FUENTES GARCÍA
 * Carnet: 19864
 * Proyecto: POST-LAB 7
 * Hardware: PIC16F887
 * Created on 12 de abril de 2023
 */

// CONFIG1
#pragma config FOSC = INTRC_NOCLKOUT// Oscillator Selection bits    
#pragma config WDTE = OFF       // Watchdog Timer Enable bit  
#pragma config PWRTE = OFF      // Power-up Timer Enable bit  
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit    
#pragma config CP = OFF         // Code Protection bit  
#pragma config CPD = OFF        // Data Code Protection bit  
#pragma config BOREN = OFF      // Brown Out Reset Selection bits  
#pragma config IESO = OFF       // Internal External Switchover bit  
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit 
#pragma config LVP = OFF         // Low Voltage Programming Enable bit 

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit 
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits 

#include <xc.h>
#include <stdint.h>
#define _XTAL_FREQ 4000000      //frecuencia del cristal en microsegundos

/*******************************************************************************
 * VARIABLES
 ******************************************************************************/

// Definir el pin para el LED
#define LED_PIN RC0

// Definir el valor de tiempo de desborde del timer para la frecuencia PWM
#define PWM_FREQ 1000

// Definir el valor máximo para el ciclo de trabajo PWM
#define PWM_MAX 255

// Definir las variables para el ciclo de trabajo PWM y el contador
unsigned char pwm_duty = 0;
unsigned char pwm_count = 0;
unsigned int adc_value = 0;

/*******************************************************************************
 * PROTOTIPOS DE FUNCIONES
 ******************************************************************************/

void setup(void);
void setupADC(void);
void setupTMR0(void);

// Generar la señal PWM
void pwm_set(int value) {
    if (value > 0) {
        PORTCbits.RC0 = 1; // Poner en alto la salida PWM
    } else {
        PORTCbits.RC0 = 0; // Poner en bajo la salida PWM
    }
}

// Ajustar la intensidad del LED
void led_set(int value) {
    pwm_set(value); // Configurar la señal PWM
}

/*******************************************************************************
 * INTERRUPCIONES
 ******************************************************************************/

void __interrupt()isr(void) {
    
    // Verificar si la interrupción es del Timer 0
    if (T0IF) {
        // Reiniciar el valor del timer
        TMR0 = 256 - (_XTAL_FREQ / 4 / PWM_FREQ / 256);
        // Incrementar el contador PWM
        pwm_count++;
        // Verificar si el contador ha alcanzado el valor de ciclo de trabajo
        if (pwm_count > pwm_duty) {
            // Apagar el LED
            LED_PIN = 0;
        } else {
            // Encender el LED
            LED_PIN = 1;
        }
        // Verificar si el contador ha alcanzado el valor máximo
        if (pwm_count >= PWM_MAX) {
            // Reiniciar el contador
            pwm_count = 0;
        }
        // Limpiar la bandera de interrupción del Timer 0
        T0IF = 0;
    }
    
    // Verificar si la interrupción es del ADC
    if (ADIF) {
        // Leer el valor ADC
        adc_value = ADRESH << 8 | ADRESL;
        // Convertir el valor ADC a un ciclo de trabajo PWM
        pwm_duty = adc_value >> 2;
        // Limpiar la bandera de interrupción del ADC
        ADIF = 0;
    }
}


/*******************************************************************************
 * CÓDIGO PRINCIPAL
 ******************************************************************************/
int map(int input, int in_min, int in_max, int out_min, int out_max) {
  int output = (input - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  return output;
}

void main(void) {
    
    setup();
    setupTMR0();
    setupADC();
    
    while(1) {
        
        // Esperar un tiempo para que el valor ADC se estabilice
        __delay_us(10);
        // Iniciar la conversión ADC
        GO = 1;
        // Esperar a que la conversión ADC termine
        while (GO);

        }
    }

/*******************************************************************************
 * FUNCIÓN DE CONFIGURACIÓN
 ******************************************************************************/
void setup(void){
    
    ANSEL = 0b00000111;                 // Habilitamos las entradas analógicas
    ANSELH = 0;

    TRISA = 0b00000111;                 // Bits de entrada para los pots
    TRISC = 0;                          // Bits de salida para los motores y LED
    
    PORTA = 0;
    PORTC = 0;                          // Limpiamos todos los puertos


//_______________________CONFIGURACIÓN DEL OSCILADOR____________________________
    
    OSCCONbits.IRCF = 0b0110 ;  
    OSCCONbits.SCS = 1;   
    
//_____________________CONFIGURACIÓN DE INTERRUPCIONES__________________________
    
    INTCONbits.T0IE = 1;            // Habilitar las interrupción del TMR0
    PIE1bits.ADIE = 1;              // Habilitar las interrupción del ADC
    INTCONbits.GIE = 1;             // Habilitar las interrupciones globales
    
}
    
/*******************************************************************************
 * FUNCIÓN DE CONFIGURACIÓN DEL ADC
 ******************************************************************************/

void setupADC(void){ 
    
    // SELECCIONAR RELOJ PARA CONVERSIÓN ADC
   
    ADCON0bits.ADCS = 0b01; // Frecuencia de muestreo = Fosc/16
    
    // SELECCIONAR VOLTAJES DE REFERENCIA
    
    ADCON1bits.VCFG0 = 0;       // Vref+ en VDD
    ADCON1bits.VCFG1 = 0;       // Vref- en VSS
    
    ADCON1bits.ADFM = 1;        // Justificado a la derecha  
    
    // SELECCIONAR CANAL DE ENTRADA ADC 
    
    ADCON0bits.CHS = 0b0000;    // Seleccionar el canal AN0
    
    // HABILITAR ADC 
    ADCON0bits.ADON = 1;        // Habilitamos el ADC
    __delay_us(100);  
    
}               
    
/*******************************************************************************
 * FUNCIÓN DE CONFIGURACIÓN DEL TIMER 0
 ******************************************************************************/
    
    void setupTMR0(void){
        
    OPTION_REGbits.T0CS = 0;                        // Fuente de reloj interna
    OPTION_REGbits.PSA = 0;                         // Habilitar el preescaler
    OPTION_REGbits.PS = 0b011;                      // Preescalador = 256
    TMR0 = 256 - (_XTAL_FREQ / 4 / PWM_FREQ / 256); // Reiniciar el temporizador
}